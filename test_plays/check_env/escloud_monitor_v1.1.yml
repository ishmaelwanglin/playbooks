---
- name: escloud monitor
  hosts: all
  remote_user: root
  gather_facts: false
  tasks:
# get hostname
  - block:
    - name: gather node's hostname
      shell: hostname -s
      register: hostname_info
    - set_fact: nodename={{ hostname_info.stdout }}
    when: inventory_hostname in play_hosts
#create play book running log file
  - block:
    - name: create escloud_monitor_log file
      file: path=/root/escloud_monitor.log state=touch
    - set_fact: logfile=/root/escloud_monitor.log
    - name: gather start time
      shell: date +"%F.%T"
      register: time
    - name: logging time
      shell: >
             echo -e "\n[START] ==========  start check escloud  {{ time.stdout }} . ==========" >> {{ logfile }}
    delegate_to: localhost
    run_once: true
# only one ceph cluster reserve
  - set_fact: cn=0
  
# check_memory 
  - block:
    - name: gather memory free value
      shell: >
             free -g |awk '{if(NR==2){sum=$4+$7}}END{print sum}'
      register: mem_info
    - name: < memory is successfull >
      debug: msg="[INFO] on {{ nodename }} free memory and cached memory total left {{ mem_info.stdout }} GB."
      when: mem_info.stdout|int > 9
    - name: < memory is fail >
      shell: >
             echo "[WARN] on {{ nodename }} free memory and cached memory total left {{ mem_info.stdout }} GB." >> {{ logfile }}
      delegate_to: localhost
      when: mem_info.stdout|int < 9
# check_network 
  - block:
    - name: < check_network >
      shell: ping -c 2 -i 0.01 {{ inventory_hostname }}
      register: net_info
    - name: < network is failed >
      shell: echo "[WARN] {{ inventory_hostname }} net is failed!" >> {{ logfile }}
      when: net_info.rc != 0
    - name: < network is successfull >
      debug: msg="[INFO] {{ inventory_hostname }} net is successfull."
      when: net_info.rc == 0
    delegate_to: localhost
# check_db
  - block:
    - name: get db server mgmt ip
      shell: hostname -i 
      register: mysql_ip
    - name: < get_port_status of mariadb >
      wait_for:
           port: 3307
           delay: 1
           timeout: 2
           host: "{{ mysql_ip.stdout }}"
      register: db_info
    - name: < "{{ db_info.port }} port is closed!" >
      shell: echo "[WARN] on {{ inventory_hostname }} {{ db_info.port }} port is closed!" >> {{ logfile }}
      delegate_to: localhost
      when: db_info.state != "started"
    - block:
      - name: < check bin log's size >
        shell: mysql -uroot -e "SHOW BINARY LOGS;" |tail -1|awk '{print $2}'
        register: bin_info
      - set_fact: bin_size={{ bin_info.stdout }}
      - debug: 
             var: bin_size
             verbosity: 1
      - name: < display bin log's size >
        debug: msg="[INFO] Check binary logs size in  MySQL database"
        when: bin_size|int >= 100000000
      - name: < bin logging >
        shell: echo "[WARN] on {{ inventory_hostname }} Check binary logs size in  MySQL database" >> {{ logfile }}
        delegate_to: localhost
        when: bin_size|int < 100000000
    when: inventory_hostname in groups.controller
# check_ceph_cluster
  - block:
    - name: < Ceph cluster status >
      shell: ceph health detail
      register: ceph_health_info
    - name: < HEALTH OK !>
      debug: msg="< HEALTH OK !>"
      when: ceph_health_info.stdout|search("OK")
    - name: < HEALTH WARN !>
      shell: echo "[WARN] {{ ceph_health_info.stdout }}" >> {{ logfile }}
      delegate_to: localhost
      when: not ceph_health_info.stdout|search("OK")
    when: inventory_hostname in groups.ceph-mon
# check osd stat
  - block:
    - name: < check osd stat >
      shell: |
            ceph osd tree | \
            awk '{if($0~"node"){a=$4}else if($0~"osd" && $4=="down"){print a}}'|uniq -c 
      register: osd_stat
    - name: < osd stat logging >
      shell: |
             for osd in {{ osd_stat.stdout_lines }};do
                 echo "[WARN] ${osd}" >> {{ logfile }}
             done
      when: osd_stat.stdout|length != 0
      delegate_to: localhost
    - name: < if OSD odwn >
      debug: msg="[WARN] {{ osd_stat.stdout }}" 
    when: inventory_hostname in groups.ceph-mon
# check_escloud_service  compute
  - block:
    - set_fact: compute_services="libvirt nova-compute neutron-openv"
    - name: < gather escloud services on compute >
      shell: |
            for i in {{ compute_services }};do
            n=$(ps -A | grep $i | wc -l)
            if [ $n -eq 0 ];then
              echo "[WARN] on {{ nodename }} ${i}.service is not running." 
            else
              echo "[INFO] On {{ nodename }} ${i}.service is running."
            fi
            done
      register: compute_services_stat
    - name: < compute service state logging > 
      shell: echo "{{ compute_services_stat.stdout }}" >> {{ logfile }}
      delegate_to: localhost
      when: compute_services_stat.stdout|search("WARN")
    when: inventory_hostname in groups.compute

# check_escloud_service controller 
  - block:
    - set_fact: controller_services="mysql haproxy rabbitmq mongo nova-api nova-novncproxy nova-objectstor nova-consoleaut \
                                     nova-conductor nova-cert nova-scheduler neutron-openvsw neutron-rootwra \
                                     neutron-metadat neutron-server neutron-ns-meta neutron-dhcp-ag neutron-l3-agen \
                                     cinder-backup cinder-api cinder-volume cinder-schedule"
    - name: < gather escloud services on controller >
      shell: |
            for i in {{ controller_services }};do
            n=$(ps -A | grep $i | wc -l)
            if [ $n -eq 0 ];then
              echo "[WARN] on {{ nodename }} ${i}.service is not running."
            else
              echo "[INFO] on {{ nodename }} ${i}.service is running."
            fi
            done
      register: controller_services_stat
    - name: < controller service state logging >
      shell: echo "{{ controller_services_stat.stdout }}" >> {{ logfile }}
      delegate_to: localhost
      when: controller_services_stat.stdout|search("WARN")
    when: inventory_hostname in groups.controller
# check crm 
  - block:
    - name: < Pacemaker cluster online nodes >
      shell: crm  status | grep Online | egrep -o "node-[[:digit:]]+"| wc -w
      register: res_online_count
    - name: < count of controller nodes >
      shell: cat /etc/haproxy/conf.d/020-keystone-1.cfg |grep server | awk '{print $2}'| wc -l
      register: res_ctrl_count
    - name: < CRM logging >
      shell: echo "[WARN] pacemaker service is offline on {{ nodename }}." >> {{ logfile }}
      delegate_to: localhost
      when: res_online_count|int < res_ctrl_count|int
    - debug: msg="[INFO] CRM服务节点服务正常"
      when: res_online_count|int == res_ctrl_count|int
    when: inventory_hostname in groups.controller
#check rabbitmq
  - block:
    - name: < check rabbitmq >
      shell: |
             rabbitmqctl cluster_status | grep "running_nodes" | \
             egrep -o "rabbit.*[[:digit:]]" | awk 'BEGIN{FS=","}{print NF}'
      register: running_node
    - name: < Display rabbitmq-server running nodes >
      debug: msg="[INFO] Current running rabbimq-server is {{ running_node.stdout }}"
    - name: < RabbitMQ cluster is not OK! >
      shell: echo "[WARN] RabbitMQ cluster is not OK!" >> {{ logfile }}
      delegate_to: localhost
      when: running_node.stdout|int < 3
    - name: < RabbitMQ cluster is OK. >
      debug: msg="[INFO] RabbitMQ cluster is OK!"
      when: running_node.stdout|int == 3
    when: inventory_hostname in groups.controller
# check mongo process
  - block:
    - name: < mongod  pid >
      shell: cat /var/run/mongodb/mongod.pid
      register: res_pid
    - name: < mongod  物理内存 >
      shell: ps -o rss -p {{ res_pid.stdout }} | awk /[[:digit:]]/'{print $1/1024}'
      register: res_rss
    - debug:
            var: res_rss.stdout
            verbosity: 1
    - name: < mongod  memory used ratio >
      shell: ps -o pmem {{ res_pid }} | sed -n 2p
      register: res_pmem
    - debug:
            var: res_pmem.stdout
            verbosity: 1
    - name: < mongo内存占用异常 >
      shell: |
             echo "[WARN] on {{ nodename }} Mongod process using {{ res_rss.stdout }} MB memory, \
             {{ res_pmem.stdout }} percentage of system memory." >> {{ logfile }}
      delegate_to: localhost
      when: res_rss.stdout|int >= 10000 or res_pmem.stdout|int >=20
    - name: < mongo内存占用正常 >
      debug: msg="[INFO] mongod process using {{res_rss.stdout}} MB memory, 
                  {{ res_pmem.stdout }} percentage of system memory."
      when: res_rss.stdout|int < 10000 and res_pmem.stdout|int < 20
    when: inventory_hostname in groups.controller
# check_process_mysql
  - block:
    - name: < 获取mysql pid >
      shell: cat /var/run/mysql/mysqld.pid
      register: res_pid
    - name: < 获取mysql 物理内存 >
      shell: ps -o rss -p {{ res_pid.stdout }} | awk /[[:digit:]]/'{print $1/1024}'
      register: res_rss
    - debug:
            var: res_rss.stdout
            verbosity: 1
    - name: < mysql 内存占用百分比 >
      shell: ps -o pmem {{ res_pid.stdout }} | sed -n 2p
      register: res_pmem
    - debug:
            var: res_pmem.stdout
            verbosity: 1
    - name: < mysql资源占用异常 >
      shell: |
             echo "[WARN] on {{ nodename }} mysql process using {{ res_rss.stdout }} MB memory, \
             {{ res_pmem.stdout }} percentage of system memory." >> {{ logfile }}
      delegate_to: localhost
      when: res_rss.stdout|int >= 10000 or res_pmem.stdout|int >=10
    - name: < mysql资源占用正常 >
      debug: msg="[INFO] mysql process using {{ res_rss.stdout }} MB memory,
                  {{ res_pmem.stdout }} percentage of system memory."
      when: res_rss.stdout|int < 10000 or res_pmem.stdout|int < 10
    when: inventory_hostname in groups.controller
# check_mem_ratio
  - block:
    - name: < get free ratio >
      shell: free| awk '/Mem/{printf "%d",$7*100/$2}'
      register: free_info
    - set_fact: free_ratio={{ free_info.stdout }}
    - name: < mem ratio logging >
      shell: echo "[WARN] on {{ nodename }} avail memory ratio less than 10%." >> {{ logfile }}
      delegate_to: localhost
      when: free_ratio|int <= 10
    - name: < Memory ratio is OK. >
      debug: msg="[INFO] on {{ nodename }} avail memory ratio is OK."
      when: free_ratio|int >= 10
# check_os_root_ratio
  - block:
    - name: < get os-root ratio >
      shell: df -h | awk '/os-root/{print $5}' | egrep -o "[[:digit:]]{1,3}"
      register: root_info
    - set_fact: root_ratio={{ root_info.stdout }}
    - name: < root ratio logging >
      shell: echo "[WARN] on {{ nodename }}, root partition ratio is grater than 80%, please expend disk." >> {{ logfile }}
      delegate_to: localhost
      when: root_ratio|int >= 80
    - name: < os-root is OK >
      debug: msg="[INFO] root partition is ok"
      when: root_ratio|int < 80
# check_mongo_disk_ratio
  - block:
    - name: < get mongo_disk_ratio >
      shell: df -h|awk '/mongo-mongodb/{print $5}'| egrep -o "[[:digit:]]{1,3}"
      register: mongo_info
    - set_fact: mongo_ratio={{ mongo_info.stdout }}
    - name: < mongo_disk_ratio logging >
      shell: echo "[WARN] on {{ nodename }} mongo partition ratio is grater than 80%, please expend disk" >> {{ logfile }}
      delegate_to: localhost
      when: mongo_ratio|int >= 80
    - name: < mongo_disk_ratio is OK >
      debug: msg="[INFO] mongo partition is ok"
      when: mongo_ratio|int < 80
    when: inventory_hostname in groups.controller
# check_nova_disk_ratio
  - block:
    - name: < get nova_disk_ratio >
      shell: df -h| awk '/nova/{print $5}'
      register: nova_info
    - set_fact: nova_ratio={{ nova_info.stdout }} 
    - name: < nova_disk_ratio logging >
      shell: echo "[WARN] on {{ nodename }} "nova partition ratio is grater than 80%, please expend disk >> {{ logfile }}
      delegate_to: localhost
      when: nova_ratio|int >= 80
    - name: < nova_disk_ratio is OK >
      debug: msg="[INFO] nova partition is ok"
      when: nova_ratio|int < 80
    when: inventory_hostname in groups.compute
# check_osd_ratio
  - block:
    - name: < get osd_ratio >
      shell: df -h|awk '/ceph\/osd/{gsub(/%/,"");if($5>=80){print "[WARN]" $1,$5"%",$6}}'
      register: osd_info
    - name: < osd_ratio logging >
      shell: >
             echo -e "[INFO] on {{ nodename }} osd ratio list  \n{{ osd_info.stdout }}" >> {{ logfile }}
      delegate_to: localhost
      when: osd_info.stdout|length != 0
    when: inventory_hostname in groups.ceph-osd
  - block:
    - name: logging over
      shell: >
             echo -e "[OVER] ==================== check escloud is over. ====================\n" >> {{ logfile }}
    delegate_to: localhost
    run_once: true  
